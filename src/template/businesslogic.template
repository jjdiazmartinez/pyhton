package <package>;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import <base-package>.exception.BusinessLogicException;
import <base-package>.exception.DataManagerException;

import java.util.List;
import java.util.Map;
<IMPORT>
/**
*Code generated by charmarin from softcaribbean
*/

@Lazy
@Service
public class BusinessLogic<DTO>Impl implements BusinessLogic<DTO> {

    private final Logger log = LoggerFactory.getLogger( BusinessLogic<DTO>Impl.class);

    private final DataManager<DTO> dataManager<DTOParam>;

    public BusinessLogic<DTO>Impl(DataManager<DTO> dataManager<DTOParam>) {
        this.dataManager<DTOParam> = dataManager<DTOParam>;
    }
    @Override
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = BusinessLogicException.class)
    public <DTO> saveOrUpdate(<DTO> entity) throws BusinessLogicException{
        try{
            return this.dataManager<DTOParam>.saveOrUpdate(entity);
        }catch(DataManagerException ex){
            throw new BusinessLogicException(99,ex.getMessage());
        }catch(Exception ex){
            throw new BusinessLogicException(100,ex.getMessage());
        }
    }
     @Override
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = BusinessLogicException.class)
    public <DTO> Update(<DTO> entity) throws BusinessLogicException{
        try{
            return this.dataManager<DTOParam>.Update(entity);
        }catch(DataManagerException ex){
            throw new BusinessLogicException(99,ex.getMessage());
        }catch(Exception ex){
            throw new BusinessLogicException(100,ex.getMessage());
        }
    }
     @Override
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = BusinessLogicException.class)
    public <DTO> Delete(<DTO> entity) throws BusinessLogicException{
        try{
            return this.dataManager<DTOParam>.Delete(entity);
        }catch(DataManagerException ex){
            throw new BusinessLogicException(99,ex.getMessage());
        }catch(Exception ex){
            throw new BusinessLogicException(100,ex.getMessage());
        }
    }
    @Override
    @Transactional(readOnly = true)
    public List<<DTO>> getAll() throws BusinessLogicException{
        try{
            return this.dataManager<DTOParam>.getAll();
        }catch(DataManagerException ex){
            throw new BusinessLogicException(99,ex.getMessage());
        }catch(Exception ex){
            throw new BusinessLogicException(100,ex.getMessage());
        }
    }
    @Override
    @Transactional(readOnly = true)
    public <DTO> getById(<DTO> entity) throws BusinessLogicException{
        try{
            return this.dataManager<DTOParam>.getById(entity);
        }catch(DataManagerException ex){
            throw new BusinessLogicException(99,ex.getMessage());
        }catch(Exception ex){
            throw new BusinessLogicException(100,ex.getMessage());
        }
    }

}